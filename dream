import React, { useState, useEffect } from 'react';
import { Sparkles, Star, Loader2 } from 'lucide-react';

const TRANSLATIONS = {
  "en-US": {
    "dreamInterpreterTitle": "Zodiac Dream Oracle",
    "dreamInterpreterSubtitle": "Unlock your dreams through the wisdom of the stars ✨",
    "selectZodiacLabel": "Select your zodiac sign:",
    "dreamInputLabel": "Share your dream with the cosmos...",
    "dreamInputPlaceholder": "Describe your dream in vivid detail... The stars are listening 🌟",
    "interpretingDream": "The stars are aligning...",
    "interpretDreamButton": "Divine your dream",
    "interpretationError": "The cosmic energy is unclear. Please try again.",
    "cosmicThemesTitle": "Cosmic themes",
    "stellarAtmosphereTitle": "Stellar atmosphere",
    "celestialSymbolsTitle": "Celestial symbols",
    "zodiacInsightTitle": "Your zodiac insight",
    "starGuidanceTitle": "Guidance from the stars",
    "dreamPrompt": "You are a mystical dream oracle with deep knowledge of astrology, zodiac signs, and cosmic symbolism. The dreamer is a {zodiacSign}. Analyze this dream through the lens of their zodiac traits and celestial influences:\n\nDream: \"{dreamText}\"\nZodiac Sign: {zodiacSign}\n\nPlease respond in {locale} language with a JSON object containing:\n{\n  \"cosmicThemes\": [\"theme1\", \"theme2\", \"theme3\"],\n  \"stellarTone\": \"description of the cosmic emotional energy\",\n  \"celestialSymbols\": [\n    {\"symbol\": \"symbol1\", \"meaning\": \"astrological meaning1\"},\n    {\"symbol\": \"symbol2\", \"meaning\": \"astrological meaning2\"}\n  ],\n  \"zodiacInsight\": \"deep insight connecting the dream to their zodiac sign's traits, element, and planetary ruler\",\n  \"starGuidance\": \"mystical guidance based on their zodiac nature and current cosmic influences\"\n}\n\nInterpret this dream through the unique perspective of a {zodiacSign}, considering their elemental nature, ruling planet, and characteristic traits. Provide mystical yet meaningful insights."
  },
  "es-ES": {
    "dreamInterpreterTitle": "Oráculo de Sueños Zodiacal",
    "dreamInterpreterSubtitle": "Desbloquea tus sueños a través de la sabiduría de las estrellas ✨",
    "selectZodiacLabel": "Selecciona tu signo zodiacal:",
    "dreamInputLabel": "Comparte tu sueño con el cosmos...",
    "dreamInputPlaceholder": "Describe tu sueño con vivos detalles... Las estrellas están escuchando 🌟",
    "interpretingDream": "Las estrellas se están alineando...",
    "interpretDreamButton": "Adivina tu sueño",
    "interpretationError": "La energía cósmica no está clara. Por favor, inténtalo de nuevo.",
    "cosmicThemesTitle": "Temas cósmicos",
    "stellarAtmosphereTitle": "Atmósfera estelar",
    "celestialSymbolsTitle": "Símbolos celestiales",
    "zodiacInsightTitle": "Tu perspectiva zodiacal",
    "starGuidanceTitle": "Guía de las estrellas",
    "dreamPrompt": "Eres un oráculo místico de sueños con profundo conocimiento de astrología, signos zodiacales y simbolismo cósmico. El soñador es {zodiacSign}. Analiza este sueño a través de la lente de sus rasgos zodiacales e influencias celestiales:\n\nSueño: \"{dreamText}\"\nSigno Zodiacal: {zodiacSign}\n\nPor favor responde en {locale} idioma con un objeto JSON que contenga:\n{\n  \"cosmicThemes\": [\"tema1\", \"tema2\", \"tema3\"],\n  \"stellarTone\": \"descripción de la energía emocional cósmica\",\n  \"celestialSymbols\": [\n    {\"symbol\": \"símbolo1\", \"meaning\": \"significado astrológico1\"},\n    {\"symbol\": \"símbolo2\", \"meaning\": \"significado astrológico2\"}\n  ],\n  \"zodiacInsight\": \"perspectiva profunda conectando el sueño con los rasgos de su signo zodiacal, elemento y planeta regente\",\n  \"starGuidance\": \"guía mística basada en su naturaleza zodiacal e influencias cósmicas actuales\"\n}\n\nInterpreta este sueño a través de la perspectiva única de {zodiacSign}, considerando su naturaleza elemental, planeta regente y rasgos característicos. Proporciona perspectivas místicas pero significativas."
  }
};

const ZODIAC_SIGNS = {
  "en-US": [
    { value: "Aries", emoji: "♈", element: "Fire", dates: "Mar 21 - Apr 19" },
    { value: "Taurus", emoji: "♉", element: "Earth", dates: "Apr 20 - May 20" },
    { value: "Gemini", emoji: "♊", element: "Air", dates: "May 21 - Jun 20" },
    { value: "Cancer", emoji: "♋", element: "Water", dates: "Jun 21 - Jul 22" },
    { value: "Leo", emoji: "♌", element: "Fire", dates: "Jul 23 - Aug 22" },
    { value: "Virgo", emoji: "♍", element: "Earth", dates: "Aug 23 - Sep 22" },
    { value: "Libra", emoji: "♎", element: "Air", dates: "Sep 23 - Oct 22" },
    { value: "Scorpio", emoji: "♏", element: "Water", dates: "Oct 23 - Nov 21" },
    { value: "Sagittarius", emoji: "♐", element: "Fire", dates: "Nov 22 - Dec 21" },
    { value: "Capricorn", emoji: "♑", element: "Earth", dates: "Dec 22 - Jan 19" },
    { value: "Aquarius", emoji: "♒", element: "Air", dates: "Jan 20 - Feb 18" },
    { value: "Pisces", emoji: "♓", element: "Water", dates: "Feb 19 - Mar 20" }
  ],
  "es-ES": [
    { value: "Aries", emoji: "♈", element: "Fuego", dates: "21 Mar - 19 Abr" },
    { value: "Tauro", emoji: "♉", element: "Tierra", dates: "20 Abr - 20 May" },
    { value: "Géminis", emoji: "♊", element: "Aire", dates: "21 May - 20 Jun" },
    { value: "Cáncer", emoji: "♋", element: "Agua", dates: "21 Jun - 22 Jul" },
    { value: "Leo", emoji: "♌", element: "Fuego", dates: "23 Jul - 22 Ago" },
    { value: "Virgo", emoji: "♍", element: "Tierra", dates: "23 Ago - 22 Sep" },
    { value: "Libra", emoji: "♎", element: "Aire", dates: "23 Sep - 22 Oct" },
    { value: "Escorpio", emoji: "♏", element: "Agua", dates: "23 Oct - 21 Nov" },
    { value: "Sagitario", emoji: "♐", element: "Fuego", dates: "22 Nov - 21 Dic" },
    { value: "Capricornio", emoji: "♑", element: "Tierra", dates: "22 Dic - 19 Ene" },
    { value: "Acuario", emoji: "♒", element: "Aire", dates: "20 Ene - 18 Feb" },
    { value: "Piscis", emoji: "♓", element: "Agua", dates: "19 Feb - 20 Mar" }
  ]
};

const appLocale = '{{APP_LOCALE}}';
const browserLocale = navigator.languages?.[0] || navigator.language || 'en-US';
const findMatchingLocale = (locale) => {
  if (TRANSLATIONS[locale]) return locale;
  const lang = locale.split('-')[0];
  const match = Object.keys(TRANSLATIONS).find(key => key.startsWith(lang + '-'));
  return match || 'en-US';
};
const locale = (appLocale !== '{{APP_LOCALE}}') ? findMatchingLocale(appLocale) : findMatchingLocale(browserLocale);
const t = (key) => TRANSLATIONS[locale]?.[key] || TRANSLATIONS['en-US'][key] || key;

const ZodiacDreamInterpreter = () => {
  const [dreamText, setDreamText] = useState('');
  const [selectedZodiac, setSelectedZodiac] = useState('');
  const [interpretation, setInterpretation] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isAnimating, setIsAnimating] = useState(false);

  const zodiacSigns = ZODIAC_SIGNS[locale] || ZODIAC_SIGNS['en-US'];

  useEffect(() => {
    if (interpretation) {
      setIsAnimating(true);
      setTimeout(() => setIsAnimating(false), 1000);
    }
  }, [interpretation]);

  const interpretDream = async () => {
    if (!dreamText.trim() || !selectedZodiac) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      const prompt = t('dreamPrompt')
        .replace('{dreamText}', dreamText)
        .replace(/{zodiacSign}/g, selectedZodiac)
        .replace('{locale}', locale);

      const response = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 1500,
          messages: [{ role: "user", content: prompt }]
        })
      });

      const data = await response.json();
      let responseText = data.content[0].text;
      responseText = responseText.replace(/```json\n?/g, "").replace(/```\n?/g, "").trim();
      
      const parsedResponse = JSON.parse(responseText);
      setInterpretation(parsedResponse);
    } catch (err) {
      setError(t('interpretationError'));
      console.error('Error interpreting dream:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && e.ctrlKey) {
      interpretDream();
    }
  };

  const selectedZodiacData = zodiacSigns.find(sign => sign.value === selectedZodiac);

  return (
    <div className="min-h-screen bg-gradient-to-b from-indigo-950 via-purple-900 to-violet-950 text-white p-6 pt-12 relative overflow-hidden">
      {/* Animated stars */}
      <div className="absolute inset-0 pointer-events-none">
        {[...Array(50)].map((_, i) => (
          <div
            key={i}
            className="star"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`,
              animationDuration: `${2 + Math.random() * 2}s`
            }}
          />
        ))}
      </div>
      
      {/* Zodiac constellation background */}
      <div className="absolute inset-0 pointer-events-none opacity-10">
        <div className="constellation constellation-1"></div>
        <div className="constellation constellation-2"></div>
        <div className="constellation constellation-3"></div>
      </div>
      
      <div className="max-w-4xl mx-auto relative z-10">
        {/* Header */}
        <div className="text-center mb-12 animate-fade-in">
          <div className="mb-4">
            <Star className="w-12 h-12 mx-auto text-yellow-300 animate-pulse" />
          </div>
          <h1 className="text-5xl font-light tracking-wider bg-gradient-to-r from-yellow-300 via-purple-300 to-blue-300 bg-clip-text text-transparent mb-4">
            {t('dreamInterpreterTitle')}
          </h1>
          <p className="text-purple-200 text-lg opacity-80">
            {t('dreamInterpreterSubtitle')}
          </p>
        </div>

        {/* Zodiac Selection */}
        <div className="bg-white/5 backdrop-blur-lg rounded-3xl p-8 mb-8 shadow-2xl border border-white/10">
          <label className="block text-purple-200 mb-4 text-lg font-light">
            {t('selectZodiacLabel')}
          </label>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
            {zodiacSigns.map((sign) => (
              <button
                key={sign.value}
                onClick={() => setSelectedZodiac(sign.value)}
                className={`p-4 rounded-xl border-2 transition-all duration-300 text-center ${
                  selectedZodiac === sign.value
                    ? 'border-yellow-400 bg-yellow-400/20 text-yellow-200 shadow-lg shadow-yellow-400/25'
                    : 'border-white/20 bg-white/5 text-white/70 hover:border-purple-400 hover:bg-purple-400/10'
                }`}
              >
                <div className="text-2xl mb-1">{sign.emoji}</div>
                <div className="text-sm font-medium">{sign.value}</div>
                <div className="text-xs opacity-60">{sign.dates}</div>
                <div className="text-xs mt-1 px-2 py-1 rounded-full bg-white/10">
                  {sign.element}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Dream Input Section */}
        <div className="bg-white/5 backdrop-blur-lg rounded-3xl p-8 mb-8 shadow-2xl border border-white/10">
          <div className="mb-6">
            <label className="block text-purple-200 mb-3 text-lg font-light">
              {t('dreamInputLabel')}
            </label>
            <textarea
              value={dreamText}
              onChange={(e) => setDreamText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={t('dreamInputPlaceholder')}
              className="w-full h-40 bg-white/5 border border-white/10 rounded-xl p-4 text-white placeholder-purple-300/50 focus:outline-none focus:border-yellow-400 focus:ring-2 focus:ring-yellow-400/30 transition-all duration-300 resize-none"
            />
          </div>
          
          <button
            onClick={interpretDream}
            disabled={isLoading || !dreamText.trim() || !selectedZodiac}
            className={`w-full py-4 px-6 rounded-xl font-medium transition-all duration-300 ${
              isLoading || !dreamText.trim() || !selectedZodiac
                ? 'bg-purple-800/50 cursor-not-allowed'
                : 'bg-gradient-to-r from-yellow-500 to-purple-600 hover:from-yellow-600 hover:to-purple-700 transform hover:scale-105 shadow-lg shadow-purple-500/25'
            } flex items-center justify-center space-x-2`}
          >
            {isLoading ? (
              <>
                <Loader2 className="w-5 h-5 animate-spin" />
                <span>{t('interpretingDream')}</span>
              </>
            ) : (
              <>
                <Sparkles className="w-5 h-5" />
                <span>{t('interpretDreamButton')}</span>
              </>
            )}
          </button>
          
          {error && (
            <div className="mt-4 p-4 bg-red-500/20 border border-red-500/50 rounded-lg text-red-200">
              {error}
            </div>
          )}
        </div>

        {/* Selected Zodiac Info */}
        {selectedZodiacData && (
          <div className="bg-gradient-to-r from-yellow-400/10 to-purple-400/10 backdrop-blur-lg rounded-2xl p-6 mb-8 border border-yellow-400/20">
            <div className="flex items-center justify-center space-x-4">
              <div className="text-4xl">{selectedZodiacData.emoji}</div>
              <div className="text-center">
                <h3 className="text-xl font-light text-yellow-200">{selectedZodiacData.value}</h3>
                <p className="text-sm text-purple-200">{selectedZodiacData.element} Sign • {selectedZodiacData.dates}</p>
              </div>
            </div>
          </div>
        )}

        {/* Interpretation Section */}
        {interpretation && (
          <div className={`space-y-6 ${isAnimating ? 'animate-fade-in' : ''}`}>
            {/* Cosmic Themes */}
            <div className="bg-white/5 backdrop-blur-lg rounded-3xl p-8 shadow-2xl border border-white/10">
              <h2 className="text-2xl font-light mb-4 flex items-center">
                <Star className="w-6 h-6 mr-2 text-yellow-300" />
                {t('cosmicThemesTitle')}
              </h2>
              <div className="flex flex-wrap gap-3">
                {interpretation.cosmicThemes.map((theme, index) => (
                  <span 
                    key={index}
                    className="bg-gradient-to-r from-yellow-500/20 to-purple-500/20 px-4 py-2 rounded-full text-yellow-200 border border-yellow-400/30"
                  >
                    {theme}
                  </span>
                ))}
              </div>
            </div>

            {/* Stellar Atmosphere */}
            <div className="bg-white/5 backdrop-blur-lg rounded-3xl p-8 shadow-2xl border border-white/10">
              <h2 className="text-2xl font-light mb-4">
                {t('stellarAtmosphereTitle')}
              </h2>
              <p className="text-blue-200 leading-relaxed text-lg">
                {interpretation.stellarTone}
              </p>
            </div>

            {/* Celestial Symbols */}
            <div className="bg-white/5 backdrop-blur-lg rounded-3xl p-8 shadow-2xl border border-white/10">
              <h2 className="text-2xl font-light mb-4">
                {t('celestialSymbolsTitle')}
              </h2>
              <div className="grid gap-4">
                {interpretation.celestialSymbols.map((symbol, index) => (
                  <div key={index} className="flex items-start space-x-4">
                    <div className="bg-gradient-to-r from-purple-500/20 to-blue-500/20 p-4 rounded-xl border border-purple-400/30">
                      <span className="text-purple-200 font-medium text-lg">{symbol.symbol}</span>
                    </div>
                    <p className="text-purple-200 flex-1 leading-relaxed">{symbol.meaning}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Zodiac Insight */}
            <div className="bg-gradient-to-r from-yellow-500/10 to-purple-500/10 backdrop-blur-lg rounded-3xl p-8 shadow-2xl border border-yellow-400/20">
              <h2 className="text-2xl font-light mb-4 flex items-center">
                {selectedZodiacData && <span className="text-3xl mr-3">{selectedZodiacData.emoji}</span>}
                {t('zodiacInsightTitle')}
              </h2>
              <p className="text-yellow-100 leading-relaxed text-lg">
                {interpretation.zodiacInsight}
              </p>
            </div>

            {/* Star Guidance */}
            <div className="bg-gradient-to-r from-indigo-800/30 to-purple-800/30 backdrop-blur-lg rounded-3xl p-8 shadow-2xl border border-white/10">
              <h2 className="text-2xl font-light mb-4 flex items-center">
                <Sparkles className="w-6 h-6 mr-2 text-yellow-300 animate-pulse" />
                {t('starGuidanceTitle')}
              </h2>
              <p className="text-indigo-100 leading-relaxed text-lg">
                {interpretation.starGuidance}
              </p>
            </div>
          </div>
        )}
      </div>

      <style jsx>{`
        @keyframes fade-in {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }

        .animate-fade-in {
          animation: fade-in 0.8s ease-out forwards;
        }

        @keyframes twinkle {
          0%, 100% {
            opacity: 0.3;
            transform: scale(1);
          }
          50% {
            opacity: 1;
            transform: scale(1.2);
          }
        }

        .star {
          position: absolute;
          width: 2px;
          height: 2px;
          background: white;
          border-radius: 50%;
          animation: twinkle linear infinite;
        }

        .star::before {
          content: '';
          position: absolute;
          width: 1px;
          height: 8px;
          background: white;
          left: 50%;
          top: 50%;
          transform: translate(-50%, -50%);
        }

        .star::after {
          content: '';
          position: absolute;
          width: 8px;
          height: 1px;
          background: white;
          left: 50%;
          top: 50%;
          transform: translate(-50%, -50%);
        }

        @keyframes constellation-glow {
          0%, 100% {
            opacity: 0.1;
          }
          50% {
            opacity: 0.3;
          }
        }

        .constellation {
          position: absolute;
          width: 200px;
          height: 200px;
          border: 1px solid rgba(255, 255, 255, 0.2);
          border-radius: 50%;
          animation: constellation-glow 4s ease-in-out infinite;
        }

        .constellation-1 {
          top: 10%;
          right: 10%;
          animation-delay: 0s;
        }

        .constellation-2 {
          bottom: 20%;
          left: 15%;
          animation-delay: 1.5s;
        }

        .constellation-3 {
          top: 50%;
          right: 20%;
          width: 150px;
          height: 150px;
          animation-delay: 3s;
        }

        .constellation::before {
          content: '';
          position: absolute;
          top: 50%;
          left: 50%;
          width: 4px;
          height: 4px;
          background: rgba(255, 255, 255, 0.4);
          border-radius: 50%;
          transform: translate(-50%, -50%);
        }
      `}</style>
    </div>
  );
};

export default ZodiacDreamInterpreter;
